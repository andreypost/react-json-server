{"version":3,"sources":["components/Header.js","App.js","components/Footer.js","Main.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","App","props","handleChangeState","json","searchName","userId","setState","users","fetchRequest","callback","fetch","then","response","handleViewAll","data","editUserForm","username","value","email","address","registerUser","searchInput","arr","key","toLowerCase","state","push","timerId","setTimeout","handleSearchForm","e","clearInterval","preventDefault","handleSubmitRegister","method","body","JSON","stringify","target","city","street","suite","headers","console","log","handleEditUser","user","id","handleSubmitChangeUserForm","handleDeleteUser","this","document","getElementById","onClick","onSubmit","form","type","name","onInput","onChange","required","autoComplete","placeholder","map","index","Footer","Main","Boolean","window","location","hostname","match","ReactDOM","render","basename","exact","path","component","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61e9fed4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <header className=\"header flexcolcenter\">\r\n                <section>\r\n                    <article>\r\n                        <h1>Users Interface</h1>\r\n                        <h3>Interface that allows to view a list of users, search a user by username, add a new user, edit an existing user, delete a user.</h3>\r\n                    </article>\r\n                </section>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { users: [], searchName: '', userId: '' }\n  }\n  componentDidMount() {\n    this.editUserForm = document.getElementById('editUserForm')\n    this.registerUser = document.getElementById('registerUser')\n  }\n  handleChangeState = (json, searchName, userId) => {\n    this.setState({ users: [...json], searchName: searchName, userId: userId })\n  }\n  fetchRequest = (callback) => {\n    fetch('https://my-json-server.typicode.com/andreypost/db/posts')\n      .then(response => response.json())\n      .then(json => callback(json))\n  }\n  handleViewAll = () => {\n    const callback = (data) => {\n      this.editUserForm.username.value = this.editUserForm.email.value = this.editUserForm.address.value =\n        this.registerUser.username.value = this.registerUser.email.value = this.registerUser.address.value = ''\n      this.handleChangeState(data, '', '')\n    }\n    this.fetchRequest(callback)\n  }\n  searchInput = () => {\n    const callback = (data) => {\n      let arr = []\n      for (let key of data) {\n        if (key.username.toLowerCase() === this.state.searchName.toLowerCase()) arr.push(key)\n      }\n      this.handleChangeState(arr, this.state.searchName, '')\n    }\n    this.fetchRequest(callback)\n    this.timerId = setTimeout(() => this.fetchRequest(callback), 250)\n  }\n\n  handleSearchForm = (e) => {\n    this.setState({ searchName: '', })\n    clearInterval(this.timerId)\n    e.preventDefault()\n  }\n\n  handleSubmitRegister = (e) => {\n    fetch('https://my-json-server.typicode.com/andreypost/db/posts', {\n      method: 'POST',\n      body: JSON.stringify({\n        username: e.target.username.value,\n        email: e.target.email.value,\n        address: {\n          city: e.target.address.value,\n          street: \" \",\n          suite: \" \"\n        }\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    })\n      .then(response => response.json())\n      .then(json => console.log(json))\n      .then(() => this.handleViewAll())\n    e.preventDefault()\n  }\n\n  handleEditUser = (user) => {\n    this.editUserForm.username.value = user.username\n    this.editUserForm.email.value = user.email\n    this.editUserForm.address.value = user.address.city + ' ' + user.address.street + ' ' + user.address.suite\n    this.handleChangeState([], '', user.id)\n  }\n\n  handleSubmitChangeUserForm = (e) => {\n    if (!this.state.userId) {\n      e.preventDefault()\n      return\n    }\n    fetch(`https://my-json-server.typicode.com/andreypost/db/posts/${this.state.userId}`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        username: e.target.username.value,\n        email: e.target.email.value,\n        address: {\n          city: e.target.address.value,\n          street: \" \",\n          suite: \" \"\n        }\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    })\n      .then(response => response.json())\n      .then(json => console.log(json))\n      .then(() => this.handleViewAll())\n    e.preventDefault()\n  }\n\n  handleDeleteUser = (user) => {\n    fetch(`https://my-json-server.typicode.com/andreypost/db/posts/${user}`, {\n      method: 'DELETE'\n    })\n      .then(() => this.handleViewAll())\n  }\n  render() {\n    return (\n      <section className=\"app\">\n        <div className=\"colalignstart\">\n          <button className=\"app__view\" onClick={this.handleViewAll}>VIEW ALL USERS</button>\n          <form id=\"searchByUserName\" onSubmit={this.handleSearchForm} className=\"flexjustbet wrap\">\n            <button form=\"searchByUserName\">SEARCH USER BY NAME</button>\n            <input type=\"search\"\n              name=\"search\" onInput={this.searchInput} onChange={(e) => this.handleChangeState([], e.target.value)} required=\"username\" value={this.state.searchName} autoComplete=\"off\" placeholder=\"enter username\" />\n          </form>\n          <form id=\"registerUser\" onSubmit={this.handleSubmitRegister} className=\"flexjustcenter wrap\">\n            <button form=\"registerUser\">REGISTER</button>\n            <input type=\"text\"\n              name=\"username\" required=\"username\" placeholder=\"username\" autoComplete=\"off\" />\n            <input type=\"email\"\n              name=\"email\" required=\"email\" placeholder=\"email\" autoComplete=\"off\" />\n            <input type=\"text\"\n              name=\"address\" placeholder=\"address\" autoComplete=\"off\" />\n          </form>\n          <form id=\"editUserForm\" onSubmit={this.handleSubmitChangeUserForm} className=\"flexjustcenter wrap\">\n            <button form=\"editUserForm\" type=\"submit\">EDIT</button>\n            <input type=\"text\"\n              name=\"username\" autoComplete=\"off\" />\n            <input type=\"email\"\n              name=\"email\" autoComplete=\"off\" />\n            <input type=\"text\"\n              name=\"address\" autoComplete=\"off\" />\n            <i onClick={this.handleViewAll} className=\"app__cancel pointer\">CANCEL</i>\n          </form>\n        </div>\n        <table>\n          <thead>\n            <tr>\n              <th>USERNAME</th>\n              <th>EMAIL</th>\n              <th>ADDRESS: city, street, suite</th>\n              <th>EDIT</th>\n              <th>DELETE</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.users.map((user, index) => (\n              <tr key={index}><td>{user.username}</td><td>{user.email}</td><td>{user.address.city} {user.address.street} {user.address.suite}</td><td onClick={() => this.handleEditUser(user)}>edit</td><td onClick={() => this.handleDeleteUser(user.id)}>delete</td></tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    );\n  }\n}","import React from 'react';\r\n\r\n\r\nexport default class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Header from './components/Header';\r\nimport App from './App';\r\nimport Footer from './components/Footer';\r\n\r\nconst Main = () => {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <main>\r\n                <App />\r\n            </main>\r\n            <Footer />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route } from \"react-router-dom\";\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './normalize.css';\nimport './index.css';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <Router>\n  //   <Route exact path=\"/\" component={Main} />\n  // </Router>,\n  <HashRouter basename='/'>\n    <Route exact path=\"/\" component={Main} />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}